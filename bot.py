import asyncio
import os
from aiohttp import web
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –ü–∞–º'—è—Ç—å –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å–µ–∞–Ω—Å—É –≤–∏–≤—á–µ–Ω–Ω—è
user_data = {}

# –ö–Ω–æ–ø–∫–∏
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

def main_menu():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="1. Send Text", callback_data="send_text")],
            [InlineKeyboardButton(text="2. Learn New Words", callback_data="learn_words")],
            [InlineKeyboardButton(text="3. Repeat Words", callback_data="repeat_words")],
        ]
    )

def word_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –í–∏–≤—á–∏–≤", callback_data="learned"),
                InlineKeyboardButton(text="ü§î –ó–Ω–∞—é", callback_data="knew"),
                InlineKeyboardButton(text="‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–µ", callback_data="next")
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ]
    )

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message(CommandStart())
async def start_handler(message: Message):
    user_data[message.from_user.id] = {"words": [], "index": 0, "learned": 0, "skipped": 0, "mode": None}
    await message.answer("üëã –í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=main_menu())

# --- –¢—É—Ç —Ç–∏ –ø—ñ–¥–∫–ª—é—á–∏—à —Å–≤–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è Send Text / Learn / Repeat ---
# (–ø–æ–∫–∏ —â–æ —Ü–µ –±–∞–∑–æ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —Ç–∏ —Å–∞–º –Ω–∞–ø–∏—à–µ—à —Ñ—É–Ω–∫—Ü—ñ—ó –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ª—ñ–≤)

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–µ–±—Ö—É–∫—ñ–≤ –≤—ñ–¥ Telegram
async def handle_webhook(request):
    update = await request.json()
    await dp.feed_update(bot, update)
    return web.Response()

# –ü—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ —Å–µ—Ä–≤–µ—Ä—É
async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)

# –ü—Ä–∏ –≤–∏–∫–ª—é—á–µ–Ω–Ω—ñ —Å–µ—Ä–≤–µ—Ä—É
async def on_shutdown(app):
    await bot.delete_webhook()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤–µ—Ä–∞ aiohttp
app = web.Application()
app.router.add_post("/webhook", handle_webhook)
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    web.run_app(app, port=int(os.getenv('PORT', 8080)))