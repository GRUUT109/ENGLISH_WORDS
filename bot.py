import asyncio
import os
from aiohttp import web
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –û–±—Ä–æ–±–∫–∞ /start
@dp.message(CommandStart())
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –ë–æ—Ç –ø—Ä–∞—Ü—é—î —á–µ—Ä–µ–∑ webhook üöÄ")

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–µ–±—Ö—É–∫—É
async def handle_webhook(request):
    update = await request.json()
    await dp.feed_update(bot, update)
    return web.Response()

# –°—Ç–∞—Ä—Ç
async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)

# –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è
async def on_shutdown(app):
    await bot.delete_webhook()

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–∞
app = web.Application()
app.router.add_post("/webhook", handle_webhook)
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

if __name__ == "__main__":
    web.run_app(app, port=int(os.getenv('PORT', 8080)))